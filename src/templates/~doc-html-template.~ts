import {Api} from '../index';

export const docHtmlTemplate = (api: Api<any>) => {
    const entitiesRegexp = new RegExp(`\\b(?:${Object.keys(api.internals.entities).sort((a,b) => b.length - a.length).join('|')})\\b`, 'g');
    const processCode = (s: string) => s.replace(/</g, '&lt;').replace(entitiesRegexp, (s) => `<a href="#${transformEntityName(s)}">${s}</a>`);
    return `
<!DOCTYPE html>
<html>
    <head>
        <title>SDK documentaion</title>
    </head>
    <body>
        <style>
            * {
                margin: 0;
                padding: 0;
            }
            a {
                font-weight: 700;
                color: cornflowerblue;
                text-decoration: none;
            }
            a.active {
                color: #ed64c6;
            }
            ul {
                padding-left: 20px;
                list-style-type: none;
            }
            li {
                padding: 2px 0;
            }
            nav {
                position: fixed;
                inset: 0 auto 0 0;
                width: 300px;
                overflow-y: scroll;
            }
            body {
                padding: 0 0 0 300px;
                margin: 0;
                font-size: 14px;
            }
            main {
                background-color: #dddddd;
                display: flex;
                flex-direction: column;
                gap: 20px;
                padding: 20px;
            }
            .article {
                padding: 10px;
                border-radius: 10px;
                background-color: #fff;
                border: 2px #fff solid;
                display: flex;
                flex-direction: column;
                gap: 10px;
            }
            .article:target {
                border-color: #ed649b;
            }
            .code {
                background: #ebf3f7;
                border-radius: 8px;
                padding: 10px;
            }
            .code .description {
                font-size: 12px;
                color: #3d3e4b;
                padding: 0 0 6px;
            }
        </style>
        <nav>
            <ul>
                <li>
                    Methods
                    <ul>
                        ${mapRecursive(Object.keys(api.internals.methods), (methodName, lastPart) => {
        return `<li><a href="#${transformMethodName(methodName)}">${lastPart}</a></li>`;
    })}
                    </ul>
                </li>
                <li>
                    Entities
                    <ul>
                        ${Object.keys(api.internals.entities).sort().map(entityName => {
        return `<li><a href="#${transformEntityName(entityName)}">${entityName}</a></li>`;
    }).join('\n')}
                    </ul>
                </li>
            </ul>
        </nav>
        <main>
            <h1>Methods</h1>
            ${Object.keys(api.internals.methods).sort().map(methodName => {
        const method = api.internals.methods[methodName];
        return `
                    <div class="article" id="${transformMethodName(methodName)}">
                        <h2>${methodName}</h2>
                        <pre>sdk.${methodName}(input: Input): Promise&lt;Output&gt;</pre>
                        <div class="code">
                            <div class="description">Input</div>
                            <pre>${processCode(method.inputType?.tsExtract ?? 'null')}</pre>
                        </div>
                        <div class="code">
                            <div class="description">Output</div>
                            <pre>${processCode(method.outputType.tsResolve)}</pre>
                        </div>
                    </div>                    
                `;
    }).join('\n')}
            <h1>Entities</h1>
            ${Object.keys(api.internals.entities).sort().map(entityName => {
        const entity = api.internals.entities[entityName];
        return `
                    <div class="article" id="${transformEntityName(entityName)}">
                        <h2 id="${transformEntityName}">${entityName}</h2>
                        <div class="code">
                            <pre>${processCode(entity.tsResolveInternal)}</pre>
                        </div>
                    </div>
                `;
    }).join('\n')}
        </main>
    </body>
</html>
    `;
}

docHtmlTemplate.contentType = 'text/html';

const transformMethodName = (name: string) => `Method_${name.replace(/\./g, '__')}`;
const transformEntityName = (name: string) => `Entity_${name}`;

const mapRecursive = (keys: string[], render: (key: string, lastPart: string) => string): string => {
    let lastPath: string[] = [];
    const parts: string[] = [];
    const close = (c: number) => {
        for (; c > 0; c--) {
            parts.push('</ul></li>\n');
        }
    };
    keys.sort().forEach(key => {
        const path = key.split('.');
        const methodName = path.pop();

        let commonCount = 0;
        while (commonCount < lastPath.length && commonCount < path.length && lastPath[commonCount] === path[commonCount]) {
            commonCount++;
        }

        close(lastPath.length-commonCount);
        lastPath = path;

        for(let i = commonCount; i < path.length; i++) {
            parts.push(`<li>${path[i]}<ul>\n`);
        }

        parts.push(render(key, methodName!));
    });
    close(lastPath.length);
    return parts.join('');
};